clear , clc;
% -------delta sigma vs normal DAC----
fs=4e9;
osr=8;
nn=2^16; %fs/nn ~RBW in PSD plot, and  nn is fs in fft
% 8 sine wave tones for demo inband signal 
fbbw=235e6;
fin1=1*fbbw/8;
fin2=2*fbbw/8;
fin3=3*fbbw/8;
fin4=4*fbbw/8;
fin5=5*fbbw/8;
fin6=6*fbbw/8;
fin7=7*fbbw/8;
fin8=8*fbbw/8;

fin1=fs/nn*floor(fin1/fs*nn);
fin2=fs/nn*floor(fin2/fs*nn);
fin3=fs/nn*floor(fin3/fs*nn);
fin4=fs/nn*floor(fin4/fs*nn);
fin5=fs/nn*floor(fin5/fs*nn);
fin6=fs/nn*floor(fin6/fs*nn);
fin7=fs/nn*floor(fin7/fs*nn);
fin8=fs/nn*floor(fin8/fs*nn);



x1=sin(2*pi*fin1/fs*(0:1:2*nn));
x2=sin(2*pi*fin2/fs*(0:1:2*nn));
x3=sin(2*pi*fin3/fs*(0:1:2*nn));
x4=sin(2*pi*fin4/fs*(0:1:2*nn));
x5=sin(2*pi*fin5/fs*(0:1:2*nn));
x6=sin(2*pi*fin6/fs*(0:1:2*nn));
x7=sin(2*pi*fin7/fs*(0:1:2*nn));
x8=sin(2*pi*fin8/fs*(0:1:2*nn));
% 
% x=(x1+x2+x3+x4+x5+x6+x7+x8)/8; %inband tone to mimic basband signal
x=x1;
x=x-mean(x); % remove DC 
dac_step=2^5;%delta sigma 6 bit 
% xx1=round(x*dac_step)/dac_step; % nq DAC/quantizer output

for i=1:1:2*nn; %initailization
% ee(i)=xx1(i)-x(i);
Y0(i)=0;
Y(i)=0;
xa(i)=0;
xe(i)=0;
qe(i)=0;
xb(i)=0;
yhp(i)=0;
end;
%  erro feedback transfer function
aa=-3;% try aa=2.7 will get inband better but more for ditial work
bb=-aa;
cc=-1;
%---3nd order delta_sigma using error feed back---
for i=6:1:2*nn;
    xa(i)=x(i-1)+xe(i-1);
    xb(i)=xa(i);
     Y0(i)=round(xb(i)*dac_step)/dac_step;
    qe(i)=(Y0(i)-xb(i));
    xe(i)=aa*qe(i)+bb*qe(i-1)+cc*qe(i-2);
    xxe(i)=qe(i)+aa*qe(i-1)+bb*qe(i-2)+cc*qe(i-3);
    % Y is the FIR output)
%     Y(i)=NUM(1)*Y0(i)+NUM(2)*Y0(i-1)+NUM(3)*Y0(i-2)+NUM(4)*Y0(i-3)+NUM(5)*Y0(i-4);
    %noise shaped q error
    end;
figure(800),clf,

[pY0,f] = pwelch(Y0,nn,nn/2,nn,fs); 
dbpY0=10*log10(pY0)-max(10*log10(pY0));%unify to band psd 
plot(f,dbpY0,'b-'); hold on,
[pxe,f] = pwelch(xxe,nn,nn/2,nn,fs); 
dbpxe=10*log10(pxe)-max(10*log10(pY0));%unify to band psd 
plot(f,dbpxe,'g-'); grid on,

xlabel('Frequency (Hz)');
ylabel('spectrum (dBc)')
title('6b SD DAC spectrum');



%%%%% noise power sumation for hann window fft %%%%%%
psum=0;
[mval, imax]=max(pY0);
for i=1:1:nn/2/osr, % skip i=1-3 for DC if yout want
        if i==(imax),a=0; % signal Freq.
        elseif i==(imax-1),a=0;
          elseif i==(imax+1),a=0;
            else, 
              psum=psum+pY0(i); % accumulating 
              end % end of if loop
end % end of loop for noise power sumation of hanning window FFT
snr=10*log10((pY0(imax)+pY0(imax+1)+pY0(imax-1))/psum),
% % % end of the .m file  
